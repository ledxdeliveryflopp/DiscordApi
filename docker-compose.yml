name: discordapi

services:

  user_database:
    container_name: user_database
    image: postgres
    restart: on-failure
    environment:
      POSTGRES_DB: user
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin
    volumes:
      - database:/data/
    ports:
      - "5443:5432"
    networks:
      - sql

  token_database:
    container_name: token_database
    image: postgres
    restart: on-failure
    environment:
      POSTGRES_DB: token
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin
    ports:
      - "5444:5432"
    networks:
      - sql

  pgadmin:
    container_name: pgadmin4
    image: dpage/pgadmin4
    restart: on-failure
    env_file:
      - .env
    ports:
      - "5543:5543"
    networks:
      - sql

  nginx:
    image: nginx
    container_name: nginx
    ports:
      - protocol: tcp
        target: 8000
        published: 8881
    env_file:
      - .env
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - nginx

  nginx-ui:
    image: 'uozi/nginx-ui:latest'
    stdin_open: true
    tty: true
    container_name: nginx-ui
    restart: always
    environment:
      - TZ=Asia/Novosibirsk
    volumes:
      - '/mnt/user/appdata/nginx:/etc/nginx'
      - '/mnt/user/appdata/nginx-ui:/etc/nginx-ui'
      - '/var/www:/var/www'
    ports:
      - 8080:80
      - 8443:443
    networks:
      - nginx

  user_microservice:
    container_name: user
    build:
      ./user_microservice
    ports:
      - "7000:7000"
    networks:
      - sql
      - nginx

  authorization_microservice:
    container_name: authorization
    build:
      ./authorization_microservice
    ports:
      - "8000:8000"
    networks:
      - sql
      - nginx

  api_gateway:
    container_name: gateway
    build:
      ./api_gateway
    ports:
      - "9000:9000"
    networks:
      - sql
      - nginx

volumes:
  database:

networks:
  sql:
  nginx: